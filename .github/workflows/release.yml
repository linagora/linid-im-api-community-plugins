name: Release plugins

on:
  push:
    branches: [main]

jobs:
  detect-plugins:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get modified plugins
        id: set-matrix
        run: |
          echo "🔍 Detecting modified plugins from commit messages..."

          # Get last tag or empty if none
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "Last tag found: $LAST_TAG"
            RANGE="$LAST_TAG..HEAD"
          else
            echo "No tag found, using all commits"
            RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
          fi

          echo "Using range: $RANGE"

          # Extract plugin names from commit messages like: feat(plugin): message
          PLUGINS=$(git log $RANGE --pretty=format:"%s" \
            | grep -oP '(?<=\().+?(?=\))' \
            | sort -u \
            | grep -v '^template-plugin$' \
            | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "matrix=${PLUGINS}"
          echo "matrix=${PLUGINS}" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: detect-plugins
    if: needs.detect-plugins.outputs.matrix != '[]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --no-tty --import
          echo "no-tty" >> ~/.gnupg/gpg.conf
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Release plugins
        run: |
          PLUGINS=$(echo '${{ needs.detect-plugins.outputs.matrix }}' | jq -r '.[]')
          for plugin in $PLUGINS; do
            echo "🔹 Releasing $plugin"
            mvn -ntp io.github.zorin95670:semantic-version:0.4.3:release \
              -DtagPrefix="${plugin}-v" -Dscope=$plugin -Dworkingdir=$plugin
          done

      - name: Build and deploy plugins to Maven Central
        run: |
          echo "🔹 Installing parent POM locally"
          mvn -ntp install -N -DskipTests
          
          PLUGINS=$(echo '${{ needs.detect-plugins.outputs.matrix }}' | jq -r '.[]')
          for plugin in $PLUGINS; do
            echo "🔹 Building $plugin"
            mvn -ntp install -DskipTests -f $plugin/pom.xml

            echo "🔹 Deploying $plugin"
            mvn -ntp deploy -DskipTests -Dcheckstyle.skip=true \
              -s .github/maven-settings.xml -f $plugin/pom.xml
          done
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}

      - name: Push all new commits and tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/linagora/linid-im-api-community-plugins.git
          git push origin main
          git push origin --tags
